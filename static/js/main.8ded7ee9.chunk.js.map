{"version":3,"sources":["logo.svg","ListItems.js","App.js","reportWebVitals.js","assets/fonts/Josefin_Sans/JosefinSans-Bold.ttf","assets/fonts/Josefin_Sans/JosefinSans-Regular.ttf","index.js"],"names":["ListItems","props","items","view","filter","item","isCompleted","listItems","map","className","isDark","onClick","markCompleted","key","text","deleteItem","id","App","state","currentItem","handleInput","bind","addItem","clearCompleted","setView","toggleMode","e","this","setState","target","value","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","toggledItems","prevState","type","onSubmit","placeholder","onChange","hidden","length","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ded7ee9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\n\r\nfunction ListItems(props) {\r\n    // store the props.items in an array called items\r\n    var items;\r\n    // filter the items array according to the selected view\r\n    if (props.view === \"all\") {\r\n        items = props.items;\r\n    } else if (props.view === \"active\") {\r\n        items = props.items.filter(item => \r\n            !item.isCompleted)\r\n    } else if (props.view === \"completed\") {\r\n        items = props.items.filter(item =>\r\n            item.isCompleted)\r\n    }\r\n\r\n    /* deconstruct the items list using the map function\r\n    and create a new div for each item */\r\n    const listItems = items.map(item => {\r\n        return <div \r\n            key={item.key} \r\n            className={`list ${props.isDark ? \"dark_list\" : \"\"}`}>\r\n            <div \r\n                className=\"circle_border_wrap\">\r\n                <div \r\n                    // when the circle is clicked isCompleted is toggled in state\r\n                    onClick={() => props.markCompleted(item.key)}\r\n                    /* if isCompleted is false we add the class .untick_circle to\r\n                    to cover up the div with the tick, ie un-tick the item */\r\n                    className={`${item.isCompleted ? \"tick_circle\" : \"untick_circle\"}\r\n                                ${props.isDark ? \"dark_untick_circle\" : \"\"}`}>\r\n                </div>\r\n            </div>\r\n            <p \r\n                className={`${item.isCompleted ? \"crossover_text\" : \"\"} \r\n                            ${item.isCompleted && props.isDark ? \"dark_crossover_text\" : \"\"}`}>\r\n                {item.text}\r\n            </p>\r\n            <div \r\n                className=\"item_cross\"\r\n                // a function to delete the item if the cross is clicked\r\n                onClick={() => props.deleteItem(item.key)}>\r\n            </div>\r\n        </div>\r\n    })\r\n    \r\n\r\n    // display the deconstructed list using return\r\n    return (\r\n        <div id=\"items_container\">{listItems}</div>\r\n    )\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // define the state\n    this.state = {\n      // an option to choose light or dark mode\n      isDark: false,\n      // an option to choose how which items to view from the list\n      view: 'all',\n      // the array of todos\n      items: [],\n      // the current todo being typed in the input field\n      currentItem: {\n        text: '',\n        key: '',\n        isCompleted: false\n      }\n    };\n\n    // bind the methods to \"this\"\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.markCompleted = this.markCompleted.bind(this);\n    this.clearCompleted = this.clearCompleted.bind(this);\n    this.setView = this.setView.bind(this);\n    this.toggleMode = this.toggleMode.bind(this);\n  }\n\n  // define the methods\n\n  // update the current item with the text typed in the input field with the key as the current time\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n        isCompleted: false\n      }\n    })\n  }\n\n  // the method that adds a new todo item to the list when the form is submitted\n  addItem(e) {\n    // prevent the page from refreshing by default on submit\n    e.preventDefault();\n    // grab the current item and store it in a variable\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    // add the new item to the list if text is not empty and update state\n    if (newItem.text !== \"\") {\n      // a new array that includes the old items unpacked and the new item\n      const newItems = [...this.state.items, newItem];\n      // update state and clear the input field by setting currentItem to ''\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: '',\n          key: '',\n          isCompleted: false\n        }\n      })\n    }\n  }\n\n  // a method to delete a single todo item when the cross is clicked\n  deleteItem(key) {\n    /* filter the items list that is saved in state => \n    leave all items except the one with the key that needs deleting */\n    const filteredItems = this.state.items.filter(item =>\n      item.key !== key);\n    // update the state with the new filtered items list\n    this.setState({\n      items: filteredItems\n    })\n  }\n  \n  // a method to tick an item to mark it completed\n  markCompleted(key) {\n    // find the item with the given key and set isCompleted to true\n    const toggledItems = this.state.items.map(item => {\n      if (item.key === key) {\n        item.isCompleted = true;\n        return item;\n      } else {\n        return item;\n      }\n    });\n    this.setState({\n      items: toggledItems\n    })\n  }\n\n  // a method to clear all completed todos\n  clearCompleted() {\n    /* filter the items list that is saved in state => \n    leave only items where isCompleted is false */\n    const filteredItems = this.state.items.filter(item =>\n      !item.isCompleted);\n    // update the state with the new filtered items list\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  // a method to change the which items are being viewed from the list\n  setView(e) {\n    this.setState({\n      view: e.target.id\n    })\n  }\n\n  // a method to toggle light and dark mode\n  toggleMode() {\n    this.setState(prevState => ({ isDark: !prevState.isDark }));\n  }\n\n  render() {\n    return (\n      <div className={`light_bg ${this.state.isDark ? \"dark_bg\" : \"\"}`}>\n        <div id=\"app_container\">\n          <h1>TODO</h1>\n          <div className={`switch_to_dark ${this.state.isDark ? \"switch_to_light\" : \"\"}`} \n          onClick={this.toggleMode}></div>\n          <form \n              id=\"input_field\" type=\"text\" \n              // when the form is submitted (by pressing enter) we add the new item\n              onSubmit={this.addItem}>\n              <div className={`light_input_circle ${this.state.isDark ? \"dark_input_circle\" : \"\"}`}></div>\n              <input type=\"text\" placeholder=\"Create a new todo...\"\n                  className={`light_input ${this.state.isDark ? \"dark_input\" : \"\"}`}\n                  /* link the value of the input field to the current item saved in state\n                  and add an event handler to update state each time a letter is typed */\n                  value={this.state.currentItem.text}\n                  onChange={this.handleInput}>\n              </input>\n              <button type=\"submit\" hidden></button>\n          </form>\n          <ListItems \n              // pass the state variables to the ListItems component as props\n              // pass the required functions as props\n              items={this.state.items}\n              view={this.state.view}\n              isDark={this.state.isDark}\n              deleteItem={this.deleteItem}\n              markCompleted={this.markCompleted}>\n          </ListItems>\n          <div className={`light_footer ${this.state.isDark ? \"dark_footer\" : \"\"}`}>\n            <p \n                className={`light_counter ${this.state.isDark ? \"dark_counter\" : \"\"}`}>\n                {this.state.items.length} items left\n            </p>\n            <nav className={this.state.isDark ? \"dark_nav\" : \"\"}>\n              <ul>\n                <li id=\"all\" \n                    className={`light_filter ${this.state.isDark ? \"dark_filter\" : \"\"}\n                                ${this.state.view === \"all\" ? \"selected_filter\" : \"\"}`}\n                    onClick={this.setView}>\n                    All\n                </li>\n                <li id=\"active\" \n                    className={`light_filter ${this.state.isDark ? \"dark_filter\" : \"\"}\n                                ${this.state.view === \"active\" ? \"selected_filter\" : \"\"}`}\n                    onClick={this.setView}>\n                    Active\n                </li>\n                <li id=\"completed\"\n                    className={`light_filter ${this.state.isDark ? \"dark_filter\" : \"\"}\n                                ${this.state.view === \"completed\" ? \"selected_filter\" : \"\"}`}\n                    onClick={this.setView}>\n                    Completed\n                </li>\n              </ul>\n            </nav>\n            <button\n                onClick={this.clearCompleted}\n                className={`light_clear ${this.state.isDark ? \"dark_clear\" : \"\"}`}>\n                Clear Completed\n            </button>\n          </div>\n          <p \n              className={`light_drag ${this.state.isDark ? \"dark_drag\" : \"\"}`}>\n              Drag and drop to reorder list\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/JosefinSans-Bold.5cc7b0d1.ttf\";","export default __webpack_public_path__ + \"static/media/JosefinSans-Regular.c2462bfe.ttf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './assets/fonts/Josefin_Sans/JosefinSans-Bold.ttf';\nimport './assets/fonts/Josefin_Sans/JosefinSans-Regular.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}